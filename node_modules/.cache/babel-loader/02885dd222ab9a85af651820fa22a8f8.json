{"ast":null,"code":"var _jsxFileName = \"/home/pat/robot_ui/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport Navbar from './components/layouts/Navbar';\nimport Home from './components/pages/Home';\nimport Socket from './components/pages/Socket';\nimport Header from './components/components/Header';\nimport Maps from './components/components/Maps';\nimport Footer from './components/components/Footer';\nimport { useState, useEffect } from 'react';\nimport io from \"socket.io-client\";\nimport robot from './robot.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  useEffect(function () {\n    var URL = 'https://weather.mtec.or.th'; //const URL = 'http://localhost:8080';\n\n    var email = 'pat',\n        pass = 'agrimtec';\n    var socket = null;\n    new Promise(function (resolve, reject) {\n      //resolve(console.log('print'))\n      socket = io.connect(URL); //console.log('Im here')\n\n      socket.on('connect', function () {\n        console.log('socket connected');\n      }); // need log in\n\n      socket.on('request_login', function () {\n        //console.log('request_login');\n        socket.emit('login', {\n          email: email,\n          pass: pass\n        });\n      }); // login succeeded\n\n      socket.on('auth', function (data) {\n        //console.log('auth ok');\n        // get list of the robots that are currently online\n        socket.emit('get_robot_list');\n      });\n      socket.on('unauth', function (data) {\n        console.warn('cannot log in');\n      }); // got robot list\n\n      socket.on('get_robot_list', function (robots) {\n        if (!robots.peer) {\n          console.log('undefine robot not peer');\n          console.log('socket ID', socket.id);\n          console.log(robots[0]);\n          console.log('robot socket name', robots[0].socket_id);\n        } // connect to the first robot if exists\n\n\n        if (robots.length > 0 && !robot.peer) {\n          robot.connect(robots[0].socket_id);\n        }\n      }); // got message from server\n\n      socket.on('message', function (msg) {\n        var sender_id = msg.from; //console.log('sender_id', sender_id, 'msg auth type', msg.auth_type , 'message', msg.message)\n        //console.log('message : '+JSON.stringify(msg));\n\n        var message = msg.message;\n\n        if (message.type === 'offer') {\n          console.log('got offer');\n          robot.createPeerConnection(sender_id, msg.auth_type, message);\n        } else if (message.candidate) {\n          robot.add_candidtates(message);\n        } else {\n          console.warn('unknown message');\n        }\n      }); // receive when robot went offline\n\n      socket.on('robot_leave', function (socket_id) {\n        console.log('robot_leave : ' + socket_id);\n\n        if (robot.socket_id == socket_id) {\n          robot.destroy();\n        } else {\n          console.error('robot_leave : socket_id not match : ' + robot.socket_id + ' / ' + socket_id);\n        }\n      }); // receive when the robot refused the connection\n\n      socket.on('reject_call', function (msg) {\n        console.warn('reject_call');\n      }); // got error message\n\n      socket.on('alert', function (msg) {\n        console.warn('alert : ' + msg);\n        alert(msg);\n      });\n    });\n  }, 0);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        children: [' ', /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/map\",\n        children: /*#__PURE__*/_jsxDEV(Maps, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/test\",\n        children: /*#__PURE__*/_jsxDEV(Socket, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/pat/robot_ui/src/App.js"],"names":["BrowserRouter","Router","Switch","Route","Link","Navbar","Home","Socket","Header","Maps","Footer","useState","useEffect","io","robot","App","URL","email","pass","socket","Promise","resolve","reject","connect","on","console","log","emit","data","warn","robots","peer","id","socket_id","length","msg","sender_id","from","message","type","createPeerConnection","auth_type","candidate","add_candidtates","destroy","error","alert"],"mappings":"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","sourcesContent":["import { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport Navbar from './components/layouts/Navbar';\nimport Home from './components/pages/Home';\nimport Socket from './components/pages/Socket';\nimport Header from './components/components/Header';\nimport Maps from './components/components/Maps';\nimport Footer from './components/components/Footer'\nimport { useState, useEffect } from 'react'\nimport io from \"socket.io-client\";\nimport robot from './robot.js'\nfunction App() {\n\n\tuseEffect(() => {\n\t\tconst URL = 'https://weather.mtec.or.th';\n\t\t//const URL = 'http://localhost:8080';\n\t\tconst email = 'pat', pass = 'agrimtec';\n\t\tvar socket = null;\n\t\tnew Promise((resolve, reject) => {\n\t\t\t//resolve(console.log('print'))\n\t\t\tsocket = io.connect(URL);\n\t\t\t//console.log('Im here')\n\t\t\tsocket.on('connect', function () {\n\t\t\t\tconsole.log('socket connected');\n\n\t\t\t});\n\n\t\t\t// need log in\n\t\t\tsocket.on('request_login', () => {\n\t\t\t\t//console.log('request_login');\n\t\t\t\tsocket.emit('login', { email: email, pass: pass });\n\t\t\t});\n\n\t\t\t// login succeeded\n\t\t\tsocket.on('auth', function (data) {\n\t\t\t\t//console.log('auth ok');\n\t\t\t\t// get list of the robots that are currently online\n\t\t\t\tsocket.emit('get_robot_list');\n\t\t\t});\n\n\t\t\tsocket.on('unauth', function (data) {\n\t\t\t\tconsole.warn('cannot log in');\n\t\t\t});\n\n\t\t\t// got robot list\n\t\t\tsocket.on('get_robot_list', function (robots) {\n\t\t\t\tif (!robots.peer) {\n\t\t\t\t\tconsole.log('undefine robot not peer')\n\t\t\t\t\tconsole.log('socket ID', socket.id)\n\t\t\t\t\tconsole.log(robots[0])\n\t\t\t\t\tconsole.log('robot socket name', robots[0].socket_id)\n\t\t\t\t}\n\n\t\t\t\t// connect to the first robot if exists\n\t\t\t\tif (robots.length > 0 && !robot.peer) {\n\t\t\t\t\trobot.connect(robots[0].socket_id);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// got message from server\n\t\t\tsocket.on('message', (msg) => {\n\t\t\t\tvar sender_id = msg.from;\n\t\t\t\t//console.log('sender_id', sender_id, 'msg auth type', msg.auth_type , 'message', msg.message)\n\t\t\t\t//console.log('message : '+JSON.stringify(msg));\n\t\t\t\tvar message = msg.message;\n\n\t\t\t\tif (message.type === 'offer') {\n\t\t\t\t\tconsole.log('got offer');\n\t\t\t\t\trobot.createPeerConnection(sender_id, msg.auth_type, message);\n\t\t\t\t}\n\t\t\t\telse if (message.candidate) {\n\t\t\t\t\trobot.add_candidtates(message);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconsole.warn('unknown message');\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// receive when robot went offline\n\t\t\tsocket.on('robot_leave', (socket_id) => {\n\t\t\t\tconsole.log('robot_leave : ' + socket_id);\n\t\t\t\tif (robot.socket_id == socket_id) {\n\t\t\t\t\trobot.destroy();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconsole.error('robot_leave : socket_id not match : ' + robot.socket_id + ' / ' + socket_id);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// receive when the robot refused the connection\n\t\t\tsocket.on('reject_call', (msg) => {\n\t\t\t\tconsole.warn('reject_call');\n\t\t\t});\n\n\t\t\t// got error message\n\t\t\tsocket.on('alert', (msg) => {\n\t\t\t\tconsole.warn('alert : ' + msg);\n\t\t\t\talert(msg);\n\t\t\t});\n\t\t});\n\t}\n\n\t\t, 0);\n\treturn (\n\n\t\t<Router>\n\n\t\t\t<Switch>\n\t\t\t\t<Route exact path='/'>\n\t\t\t\t\t{' '}\n\t\t\t\t\t<div >\n\t\t\t\t\t\t<Navbar />\n\t\t\t\t\t</div>\n\t\t\t\t\t<Header />\n\t\t\t\t\t<Home />\n\t\t\t\t\t<Footer />\n\t\t\t\t</Route>\n\t\t\t\t<Route exact path='/map'>\n\t\t\t\t\t<Maps />\n\t\t\t\t</Route>\n\t\t\t\t<Route exact path=\"/test\" >\n\t\t\t\t\t<Socket />\n\t\t\t\t</Route>\n\t\t\t</Switch>\n\n\t\t</Router>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}