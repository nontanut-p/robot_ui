{"ast":null,"code":"import _slicedToArray from \"/home/pat/robot_ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/pat/robot_ui/src/components/pages/Socket.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar socket = io();\n\nfunction Socket() {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      message = _useState2[0],\n      setMessage = _useState2[1]; //const [receivedMessages, setReceivedMessages] = useState([]);\n\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      displayName = _useState4[0],\n      setDisplayName = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      displayNameInput = _useState6[0],\n      setDisplayNameInput = _useState6[1]; //useEffect(() => {\n  // socket.on(\"new-message\", message => {\n  //   setReceivedMessages(prevState => [...prevState, message]);\n  //  });\n  // }, []);\n\n\n  var sendMessage = function sendMessage() {\n    socket.emit(\"message\", \"\".concat(new Date().toLocaleString(), \" : \").concat(message));\n    setMessage(\"\");\n  };\n\n  var onUpdateMessage = function onUpdateMessage(event) {\n    setMessage(event.target.value);\n  };\n\n  var onUpdateDisplayNameInput = function onUpdateDisplayNameInput(event) {\n    setDisplayNameInput(event.target.value);\n  };\n\n  var updateDisplayName = function updateDisplayName() {\n    setDisplayName(displayNameInput);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: displayName ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        children: receivedMessages.map(function (item, index) {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: item\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: onUpdateMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"SEND\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"display-name\",\n        children: \"Display Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: displayNameInput,\n        onChange: onUpdateDisplayNameInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: updateDisplayName,\n        children: \"SUBMIT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Socket, \"Vb1Un6hbHUQSKH7XDSsDTvXEh80=\");\n\n_c = Socket;\nexport default Socket;\n\nvar _c;\n\n$RefreshReg$(_c, \"Socket\");","map":{"version":3,"sources":["/home/pat/robot_ui/src/components/pages/Socket.js"],"names":["React","useState","useEffect","io","socket","Socket","message","setMessage","displayName","setDisplayName","displayNameInput","setDisplayNameInput","sendMessage","emit","Date","toLocaleString","onUpdateMessage","event","target","value","onUpdateDisplayNameInput","updateDisplayName","receivedMessages","map","item","index"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,EAAP,MAAe,kBAAf;;;AAEA,IAAMC,MAAM,GAAGD,EAAE,EAAjB;;AAEA,SAASE,MAAT,GAAkB;AAAA;;AAAA;;AAChB,kBAA8BJ,QAAQ,CAAC,EAAD,CAAtC;AAAA;AAAA,MAAOK,OAAP;AAAA,MAAgBC,UAAhB,iBADgB,CAEhB;;;AACA,mBAAsCN,QAAQ,CAAC,IAAD,CAA9C;AAAA;AAAA,MAAOO,WAAP;AAAA,MAAoBC,cAApB;;AACA,mBAAgDR,QAAQ,CAAC,EAAD,CAAxD;AAAA;AAAA,MAAOS,gBAAP;AAAA,MAAyBC,mBAAzB,iBAJgB,CAMhB;AACC;AACA;AACD;AACD;;;AAEC,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBR,IAAAA,MAAM,CAACS,IAAP,CAAY,SAAZ,YAA0B,IAAIC,IAAJ,GAAWC,cAAX,EAA1B,gBAA2DT,OAA3D;AACAC,IAAAA,UAAU,CAAC,EAAD,CAAV;AACD,GAHD;;AAKA,MAAMS,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC/BV,IAAAA,UAAU,CAACU,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAV;AACD,GAFD;;AAIA,MAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAAH,KAAK,EAAI;AACxCN,IAAAA,mBAAmB,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAnB;AACD,GAFD;;AAIA,MAAME,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9BZ,IAAAA,cAAc,CAACC,gBAAD,CAAd;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,cACGF,WAAW,gBACV;AAAA,8BACE;AAAA,kBACGc,gBAAgB,CAACC,GAAjB,CAAqB,UAACC,IAAD,EAAOC,KAAP;AAAA,8BACpB;AAAA,sBAAiBD;AAAjB,aAASC,KAAT;AAAA;AAAA;AAAA;AAAA,mBADoB;AAAA,SAArB;AADH;AAAA;AAAA;AAAA;AAAA,cADF,eAME;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,KAAK,EAAEnB,OAA1B;AAAmC,QAAA,QAAQ,EAAEU;AAA7C;AAAA;AAAA;AAAA;AAAA,cANF,eAOE;AAAQ,QAAA,OAAO,EAAEJ,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA,oBADU,gBAWV;AAAA,8BACE;AAAO,QAAA,GAAG,EAAC,cAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,KAAK,EAAEF,gBAFT;AAGE,QAAA,QAAQ,EAAEU;AAHZ;AAAA;AAAA;AAAA;AAAA,cAHF,eAQE;AAAQ,QAAA,OAAO,EAAEC,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAZJ;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD;;GAvDQhB,M;;KAAAA,M;AAyDT,eAAeA,MAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport io from \"socket.io-client\";\n\nconst socket = io();\n\nfunction Socket() {\n  const [message, setMessage] = useState(\"\");\n  //const [receivedMessages, setReceivedMessages] = useState([]);\n  const [displayName, setDisplayName] = useState(null);\n  const [displayNameInput, setDisplayNameInput] = useState(\"\");\n\n  //useEffect(() => {\n   // socket.on(\"new-message\", message => {\n   //   setReceivedMessages(prevState => [...prevState, message]);\n  //  });\n // }, []);\n\n  const sendMessage = () => {\n    socket.emit(\"message\", `${new Date().toLocaleString()} : ${message}`);\n    setMessage(\"\");\n  };\n\n  const onUpdateMessage = event => {\n    setMessage(event.target.value);\n  };\n\n  const onUpdateDisplayNameInput = event => {\n    setDisplayNameInput(event.target.value);\n  };\n\n  const updateDisplayName = () => {\n    setDisplayName(displayNameInput);\n  };\n\n  return (\n    <div className=\"container\">\n      {displayName ? (\n        <>\n          <ul>\n            {receivedMessages.map((item, index) => (\n              <li key={index}>{item}</li>\n            ))}\n          </ul>\n          <input type=\"text\" value={message} onChange={onUpdateMessage} />\n          <button onClick={sendMessage}>SEND</button>\n        </>\n      ) : (\n        <>\n          <label for=\"display-name\">Display Name</label>\n          <br />\n          <input\n            type=\"text\"\n            value={displayNameInput}\n            onChange={onUpdateDisplayNameInput}\n          />\n          <button onClick={updateDisplayName}>SUBMIT</button>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Socket;\n"]},"metadata":{},"sourceType":"module"}