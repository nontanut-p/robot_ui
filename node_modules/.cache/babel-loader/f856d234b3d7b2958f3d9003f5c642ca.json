{"ast":null,"code":"import wrtc from 'wrtc';\nimport socket from 'socket.io';\nimport SimplePeer from 'simple-peer';\nvar robot = {\n  pcConfig: {\n    'iceServers': [{\n      'urls': 'stun:stun.l.google.com:19302'\n    }]\n  },\n  socket_id: null,\n  candidates: [],\n  peer: null,\n  auth_type: null,\n  b_connected: false,\n  timer_check_ready: null,\n  connect: function connect(socket_id) {\n    console.log('connect robot');\n\n    if (this.socket_id) {\n      console.warn('robot already exists');\n      return;\n    }\n\n    this.candidates = [];\n    this.socket_id = socket_id;\n    socket.emit('message', {\n      to: socket_id,\n      message: {\n        type: 'call'\n      }\n    });\n  },\n  disconnect: function disconnect() {\n    console.log('disconnect robot');\n    if (this.peer) this.send_peer({\n      event: 'bye'\n    });\n    this.destroy();\n  },\n  destroy: function destroy() {\n    var _this = this;\n\n    if (this.socket_id) {\n      this.socket_id = null;\n      setTimeout(function () {\n        if (_this.peer) {\n          _this.peer.destroy();\n\n          _this.peer = null;\n        }\n      }, 100);\n\n      if (this.timer_check_ready) {\n        clearInterval(this.timer_check_ready);\n        this.timer_check_ready = null;\n      }\n    }\n  },\n  send_peer: function send_peer(data) {\n    console.log('send_peer', data);\n    this.peer.send(JSON.stringify(data));\n  },\n  createPeerConnection: function createPeerConnection(socket_id, auth_type, msg) {\n    if (!this.socket_id) {\n      console.error('robot not connect');\n      return;\n    }\n\n    var th = this;\n    /*    if( pcConfig.iceServers.length<=1 ){\n          console.log('wait ice servers');\n          setTimeout( ()=>{ th.createPeerConnection(socket_id, auth_type, msg); }, 200);\n          return;\n        }*/\n\n    console.log('createPeerConnection');\n    th.socket_id = socket_id;\n    th.auth_type = auth_type;\n    var peer = this.peer = new SimplePeer({\n      initiator: false,\n      config: this.pcConfig\n    });\n    peer.on('error', function (err) {\n      console.error(err);\n    });\n    peer.on('connect', function () {\n      console.log('peer connected');\n      th.b_connected = true;\n\n      if (!th.timer_check_ready) {\n        th.timer_check_ready = setInterval(function () {\n          th.send_peer({\n            event: 'ready'\n          });\n        }, 1000);\n      }\n    });\n    peer.on('patTest', function () {\n      console.log('patTest p2p');\n    });\n    peer.on('close', function () {\n      console.log('peer closed');\n      th.b_connected = false;\n      th.destroy();\n    });\n    peer.on('signal', function (data) {\n      console.log('signal : ' + JSON.stringify(data));\n      th.sendMessage(data);\n    });\n    peer.on('data', function (data) {\n      console.log('got data : ', data);\n\n      try {\n        data = JSON.parse(data);\n      } catch (e) {\n        console.warn('cannot parse data');\n        return;\n      }\n\n      console.log('data : ' + JSON.stringify(data));\n\n      if (data.event == 'ready') {\n        console.log('robot ready');\n\n        if (th.timer_check_ready) {\n          clearInterval(th.timer_check_ready);\n          th.timer_check_ready = null;\n        } // th.send_peer({event:'get_path_list'});\n\n\n        setInterval(function () {\n          return th.send_peer({\n            event: 'get_pc_status'\n          });\n        }, 5000);\n      } else if (data.event == 'get_path_list') {\n        console.log('got path list');\n\n        if (data.err) {\n          console.error(data.err);\n        } else {\n          if (data.paths.length > 0) {\n            console.log('data.path', data.paths);\n            th.send_peer({\n              event: 'get_path',\n              name: data.paths[0]\n            });\n          }\n        }\n      } else if (data.event == 'get_path') {\n        console.log('got path');\n\n        if (data.err) {\n          console.error(data.err);\n        }\n      }\n    });\n    this.candidates.forEach(function (c) {\n      peer.signal(c);\n    });\n    peer.signal(msg);\n  },\n  sendMessage: function sendMessage(message) {\n    var msg = {\n      to: this.socket_id,\n      message: message\n    };\n\n    try {\n      console.log('send message : ' + JSON.stringify(msg));\n    } catch (e) {\n      console.log('send message : [Circular]');\n    }\n\n    socket.emit('message', msg);\n  },\n  add_candidtates: function add_candidtates(message) {\n    console.log('got candidate');\n\n    if (this.socket_id) {\n      if (!this.peer) this.candidates.push(message);else this.peer.signal(message);\n    } else {\n      console.error('no robot');\n    }\n  }\n};\nexport default robot;","map":{"version":3,"sources":["/home/pat/robot_ui/src/robot.js"],"names":["wrtc","socket","SimplePeer","robot","pcConfig","socket_id","candidates","peer","auth_type","b_connected","timer_check_ready","connect","console","log","warn","emit","to","message","type","disconnect","send_peer","event","destroy","setTimeout","clearInterval","data","send","JSON","stringify","createPeerConnection","msg","error","th","initiator","config","on","err","setInterval","sendMessage","parse","e","paths","length","name","forEach","c","signal","add_candidtates","push"],"mappings":"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","sourcesContent":["\nimport wrtc from 'wrtc'\nimport socket from 'socket.io'\nimport SimplePeer from 'simple-peer'\n\nvar robot = {\n  pcConfig: {\n    'iceServers': [{\n      'urls': 'stun:stun.l.google.com:19302'\n    },\n    ]\n  },\n\n  socket_id: null,\n  candidates: [],\n  peer: null,\n  auth_type: null,\n  b_connected: false,\n  timer_check_ready: null,\n\n  connect: function (socket_id) {\n    console.log('connect robot');\n    if (this.socket_id) {\n      console.warn('robot already exists');\n      return;\n    }\n    this.candidates = [];\n    this.socket_id = socket_id;\n    socket.emit('message', {\n      to: socket_id,\n      message: {\n        type: 'call'\n      }\n    });\n  },\n\n  disconnect: function () {\n    console.log('disconnect robot');\n    if (this.peer)\n      this.send_peer({ event: 'bye' });\n    this.destroy();\n  },\n\n  destroy: function () {\n    if (this.socket_id) {\n      this.socket_id = null;\n      setTimeout(() => {\n        if (this.peer) {\n          this.peer.destroy();\n          this.peer = null;\n        }\n      }, 100);\n      if (this.timer_check_ready) {\n        clearInterval(this.timer_check_ready);\n        this.timer_check_ready = null;\n      }\n    }\n  },\n\n  send_peer: function (data) {\n    console.log('send_peer', data);\n    this.peer.send(JSON.stringify(data));\n  },\n\n  createPeerConnection: function (socket_id, auth_type, msg) {\n    if (!this.socket_id) {\n      console.error('robot not connect');\n      return;\n    }\n    var th = this;\n    /*    if( pcConfig.iceServers.length<=1 ){\n          console.log('wait ice servers');\n          setTimeout( ()=>{ th.createPeerConnection(socket_id, auth_type, msg); }, 200);\n          return;\n        }*/\n    console.log('createPeerConnection');\n    th.socket_id = socket_id;\n    th.auth_type = auth_type;\n    var peer = this.peer = new SimplePeer({ initiator: false, config: this.pcConfig });\n    peer.on('error', (err) => {\n      console.error(err);\n    });\n    peer.on('connect', () => {\n      console.log('peer connected');\n      th.b_connected = true;\n      if (!th.timer_check_ready) {\n        th.timer_check_ready = setInterval(() => {\n          th.send_peer({ event: 'ready' });\n        }, 1000);\n      }\n    });\n    peer.on('patTest', () => {\n      console.log('patTest p2p')\n    })\n    peer.on('close', () => {\n      console.log('peer closed');\n      th.b_connected = false;\n      th.destroy();\n    });\n    peer.on('signal', (data) => {\n      console.log('signal : ' + JSON.stringify(data));\n      th.sendMessage(data);\n    });\n    peer.on('data', (data) => {\n      console.log('got data : ', data);\n      try {\n        data = JSON.parse(data);\n      }\n      catch (e) {\n        console.warn('cannot parse data');\n        return;\n      }\n      console.log('data : ' + JSON.stringify(data));\n      if (data.event == 'ready') {\n        console.log('robot ready');\n        if (th.timer_check_ready) {\n          clearInterval(th.timer_check_ready);\n          th.timer_check_ready = null;\n        }\n        // th.send_peer({event:'get_path_list'});\n        setInterval(() => (th.send_peer({ event: 'get_pc_status' })), 5000)\n      }\n      else if (data.event == 'get_path_list') {\n        console.log('got path list');\n        if (data.err) {\n          console.error(data.err);\n        }\n        else {\n          if (data.paths.length > 0) {\n            console.log('data.path', data.paths)\n            th.send_peer({ event: 'get_path', name: data.paths[0] });\n          }\n        }\n      }\n      else if (data.event == 'get_path') {\n        console.log('got path');\n        if (data.err) {\n          console.error(data.err);\n        }\n      }\n    });\n\n    this.candidates.forEach((c) => {\n      peer.signal(c);\n    });\n    peer.signal(msg);\n  },\n\n  sendMessage: function (message) {\n    var msg = { to: this.socket_id, message: message };\n    try {\n      console.log('send message : ' + JSON.stringify(msg));\n    }\n    catch (e) {\n      console.log('send message : [Circular]');\n    }\n    socket.emit('message', msg);\n  },\n\n  add_candidtates: function (message) {\n    console.log('got candidate');\n    if (this.socket_id) {\n      if (!this.peer)\n        this.candidates.push(message);\n      else\n        this.peer.signal(message);\n    }\n    else {\n      console.error('no robot');\n    }\n  },\n\n};\n\n\nexport default robot"]},"metadata":{},"sourceType":"module"}