{"ast":null,"code":"import SimplePeer from'simple-peer';import io from\"socket.io-client\";import wrtc from'wrtc';var pc={cpuUsage:0,ramUsage:0,battery:0,temp:0};var base64Img=0;var exportData=[pc,false,base64Img];var URL='https://weather.mtec.or.th';//const URL = 'http://localhost:8080';\nvar email='pat',pass='agrimtec';var socket=null;new Promise(function(resolve,reject){//resolve(console.log('print'))\nsocket=io.connect(URL);//console.log('Im here')\nsocket.on('connect',function(){console.log('socket connected');});// need log in\nsocket.on('request_login',function(){//console.log('request_login');\nsocket.emit('login',{email:email,pass:pass});});// login succeeded\nsocket.on('auth',function(data){//console.log('auth ok');\n// get list of the robots that are currently online\nsocket.emit('get_robot_list');});socket.on('unauth',function(data){console.warn('cannot log in');});// got robot list\nsocket.on('get_robot_list',function(robots){if(!robots.peer){console.log('undefine robot not peer');console.log('socket ID',socket.id);//console.log(robots[0])\n//console.log('robot socket name', robots[0].socket_id)\n}// connect to the first robot if exists\nif(robots.length>0&&!robot.peer){robot.connect(robots[0].socket_id);exportData[1]=true;}else{console.log('Error Here');exportData[1]=false;}});// got message from server\nsocket.on('message',function(msg){var sender_id=msg.from;//console.log('sender_id', sender_id, 'msg auth type', msg.auth_type , 'message', msg.message)\n//console.log('message : '+JSON.stringify(msg));\nvar message=msg.message;if(message.type==='offer'){console.log('got offer');robot.createPeerConnection(sender_id,msg.auth_type,message);}else if(message.candidate){robot.add_candidtates(message);}else{console.warn('unknown message');}});// receive when robot went offline\nsocket.on('robot_leave',function(socket_id){console.log('robot_leave : '+socket_id);if(robot.socket_id==socket_id){robot.destroy();}else{console.error('robot_leave : socket_id not match : '+robot.socket_id+' / '+socket_id);}});// receive when the robot refused the connection\nsocket.on('reject_call',function(msg){console.warn('reject_call');});// got error message\nsocket.on('alert',function(msg){console.warn('alert : '+msg);alert(msg);});});var robot={pcConfig:{'iceServers':[{'urls':'stun:stun.l.google.com:19302'}]},socket_id:null,candidates:[],peer:null,auth_type:null,b_connected:false,timer_check_ready:null,connect:function connect(socket_id){console.log('connect robot');if(this.socket_id){console.warn('robot already exists');return;}this.candidates=[];this.socket_id=socket_id;socket.emit('message',{to:socket_id,message:{type:'call'}});},disconnect:function disconnect(){console.log('disconnect robot');if(this.peer)this.send_peer({event:'bye'});this.destroy();},destroy:function destroy(){var _this=this;if(this.socket_id){this.socket_id=null;setTimeout(function(){if(_this.peer){_this.peer.destroy();_this.peer=null;}},100);if(this.timer_check_ready){clearInterval(this.timer_check_ready);this.timer_check_ready=null;}}},send_peer:function send_peer(data){console.log('send_peer',data);this.peer.send(JSON.stringify(data));},createPeerConnection:function createPeerConnection(socket_id,auth_type,msg){if(!this.socket_id){console.error('robot not connect');return;}var th=this;/*    if( pcConfig.iceServers.length<=1 ){\n                console.log('wait ice servers');\n                setTimeout( ()=>{ th.createPeerConnection(socket_id, auth_type, msg); }, 200);\n                return;\n            }*/console.log('createPeerConnection');th.socket_id=socket_id;th.auth_type=auth_type;var peer=this.peer=new SimplePeer({initiator:false,config:this.pcConfig});peer.on('error',function(err){console.error(err);});peer.on('connect',function(){console.log('peer connected');exportData[1]=true;th.b_connected=true;if(!th.timer_check_ready){th.timer_check_ready=setInterval(function(){th.send_peer({event:'ready'});},1000);}});peer.on('close',function(){console.log('peer closed');th.b_connected=false;th.destroy();});peer.on('signal',function(data){console.log('signal : '+JSON.stringify(data));th.sendMessage(data);});peer.on('data',function(data){console.log('got data : ',data);try{//  console.log('my  Raw  Data', data)\ndata=JSON.parse(data);}catch(e){console.warn('cannot parse data');return;}// console.log('data : ' + JSON.stringify(data));\nif(data.event=='ready'){console.log('robot ready');if(th.timer_check_ready){clearInterval(th.timer_check_ready);th.timer_check_ready=null;}// th.send_peer({event:'get_path_list'});\nsetInterval(function(){return th.send_peer({event:'get_pc_status'});},5000);setInterval(function(){return th.send_peer({event:'stream'});},150);}else if(data.event=='get_pc_status'){pc.cpuUsage=data.status.cpuUsage;pc.ramUsage=data.status.ramUsage;pc.battery=data.status.battery;pc.temp=data.status.temp;}else if(data.event=='stream'){//base64Img = data.base64Img\nexportData[2]=data.base64;//console.log('base64Img eieie ', exportData[2])\n}else if(data.event=='get_path_list'){console.log('got path list');if(data.err){console.error(data.err);}else{if(data.paths.length>0){console.log('data.path',data.paths);th.send_peer({event:'get_path',name:data.paths[0]});}}}else if(data.event=='get_path'){console.log('got path');if(data.err){console.error(data.err);}}});this.candidates.forEach(function(c){peer.signal(c);});peer.signal(msg);},sendMessage:function sendMessage(message){var msg={to:this.socket_id,message:message};try{console.log('send message : '+JSON.stringify(msg));}catch(e){console.log('send message : [Circular]');}socket.emit('message',msg);},add_candidtates:function add_candidtates(message){console.log('got candidate');if(this.socket_id){if(!this.peer)this.candidates.push(message);else this.peer.signal(message);}else{console.error('no robot');}}};//exports.pc = pc\n//exports.ConnectStatus = ConnectStatus\nexport default exportData;","map":{"version":3,"sources":["/home/pat/robot_ui/src/Peer.js"],"names":["SimplePeer","io","wrtc","pc","cpuUsage","ramUsage","battery","temp","base64Img","exportData","URL","email","pass","socket","Promise","resolve","reject","connect","on","console","log","emit","data","warn","robots","peer","id","length","robot","socket_id","msg","sender_id","from","message","type","createPeerConnection","auth_type","candidate","add_candidtates","destroy","error","alert","pcConfig","candidates","b_connected","timer_check_ready","to","disconnect","send_peer","event","setTimeout","clearInterval","send","JSON","stringify","th","initiator","config","err","setInterval","sendMessage","parse","e","status","base64","paths","name","forEach","c","signal","push"],"mappings":"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","sourcesContent":["import SimplePeer from 'simple-peer'\nimport io from \"socket.io-client\";\nimport wrtc from 'wrtc'\n\nvar pc = {\n    cpuUsage: 0,\n    ramUsage: 0,\n    battery: 0,\n    temp: 0,\n}\nvar base64Img = 0\nvar exportData = [pc, false, base64Img]\nconst URL = 'https://weather.mtec.or.th';\n//const URL = 'http://localhost:8080';\nconst email = 'pat', pass = 'agrimtec';\nvar socket = null;\nnew Promise((resolve, reject) => {\n    //resolve(console.log('print'))\n    socket = io.connect(URL);\n    //console.log('Im here')\n    socket.on('connect', function () {\n        console.log('socket connected');\n    });\n    // need log in\n    socket.on('request_login', () => {\n        //console.log('request_login');\n        socket.emit('login', { email: email, pass: pass });\n    });\n\n    // login succeeded\n    socket.on('auth', function (data) {\n        //console.log('auth ok');\n        // get list of the robots that are currently online\n        socket.emit('get_robot_list');\n    });\n\n    socket.on('unauth', function (data) {\n        console.warn('cannot log in');\n    });\n\n    // got robot list\n    socket.on('get_robot_list', function (robots) {\n        if (!robots.peer) {\n            console.log('undefine robot not peer')\n            console.log('socket ID', socket.id)\n            //console.log(robots[0])\n            //console.log('robot socket name', robots[0].socket_id)\n        }\n\n        // connect to the first robot if exists\n        if (robots.length > 0 && !robot.peer) {\n            robot.connect(robots[0].socket_id);\n            exportData[1] = true\n\n        } else {\n            console.log('Error Here')\n            exportData[1] = false\n        }\n    });\n\n    // got message from server\n    socket.on('message', (msg) => {\n        var sender_id = msg.from;\n        //console.log('sender_id', sender_id, 'msg auth type', msg.auth_type , 'message', msg.message)\n        //console.log('message : '+JSON.stringify(msg));\n        var message = msg.message;\n\n        if (message.type === 'offer') {\n            console.log('got offer');\n            robot.createPeerConnection(sender_id, msg.auth_type, message);\n        }\n        else if (message.candidate) {\n            robot.add_candidtates(message);\n        }\n        else {\n            console.warn('unknown message');\n        }\n    });\n\n    // receive when robot went offline\n    socket.on('robot_leave', (socket_id) => {\n        console.log('robot_leave : ' + socket_id);\n        if (robot.socket_id == socket_id) {\n            robot.destroy();\n        }\n        else {\n            console.error('robot_leave : socket_id not match : ' + robot.socket_id + ' / ' + socket_id);\n        }\n    });\n\n    // receive when the robot refused the connection\n    socket.on('reject_call', (msg) => {\n        console.warn('reject_call');\n    });\n\n    // got error message\n    socket.on('alert', (msg) => {\n        console.warn('alert : ' + msg);\n        alert(msg);\n    });\n});\n\nvar robot = {\n    pcConfig: {\n        'iceServers': [{\n            'urls': 'stun:stun.l.google.com:19302'\n        },\n        ]\n    },\n\n    socket_id: null,\n    candidates: [],\n    peer: null,\n    auth_type: null,\n    b_connected: false,\n    timer_check_ready: null,\n\n    connect: function (socket_id) {\n        console.log('connect robot');\n        if (this.socket_id) {\n            console.warn('robot already exists');\n            return;\n        }\n        this.candidates = [];\n        this.socket_id = socket_id;\n        socket.emit('message', {\n            to: socket_id,\n            message: {\n                type: 'call'\n            }\n        });\n    },\n\n    disconnect: function () {\n        console.log('disconnect robot');\n        if (this.peer)\n            this.send_peer({ event: 'bye' });\n        this.destroy();\n    },\n\n    destroy: function () {\n        if (this.socket_id) {\n            this.socket_id = null;\n            setTimeout(() => {\n                if (this.peer) {\n                    this.peer.destroy();\n                    this.peer = null;\n                }\n            }, 100);\n            if (this.timer_check_ready) {\n                clearInterval(this.timer_check_ready);\n                this.timer_check_ready = null;\n            }\n        }\n    },\n\n    send_peer: function (data) {\n        console.log('send_peer', data);\n        this.peer.send(JSON.stringify(data));\n    },\n\n    createPeerConnection: function (socket_id, auth_type, msg) {\n        if (!this.socket_id) {\n            console.error('robot not connect');\n            return;\n        }\n        var th = this;\n        /*    if( pcConfig.iceServers.length<=1 ){\n                console.log('wait ice servers');\n                setTimeout( ()=>{ th.createPeerConnection(socket_id, auth_type, msg); }, 200);\n                return;\n            }*/\n        console.log('createPeerConnection');\n        th.socket_id = socket_id;\n        th.auth_type = auth_type;\n        var peer = this.peer = new SimplePeer({ initiator: false, config: this.pcConfig });\n        peer.on('error', (err) => {\n            console.error(err);\n        });\n        peer.on('connect', () => {\n            console.log('peer connected');\n            exportData[1] = true\n            th.b_connected = true;\n            if (!th.timer_check_ready) {\n                th.timer_check_ready = setInterval(() => {\n                    th.send_peer({ event: 'ready' });\n                }, 1000);\n            }\n        });\n\n        peer.on('close', () => {\n            console.log('peer closed');\n            th.b_connected = false;\n            th.destroy();\n        });\n        peer.on('signal', (data) => {\n            console.log('signal : ' + JSON.stringify(data));\n            th.sendMessage(data);\n        });\n        peer.on('data', (data) => {\n            console.log('got data : ', data);\n            try {\n                //  console.log('my  Raw  Data', data)\n                data = JSON.parse(data);\n\n            }\n            catch (e) {\n                console.warn('cannot parse data');\n                return;\n            }\n            // console.log('data : ' + JSON.stringify(data));\n            if (data.event == 'ready') {\n                console.log('robot ready');\n                if (th.timer_check_ready) {\n                    clearInterval(th.timer_check_ready);\n                    th.timer_check_ready = null;\n                }\n                // th.send_peer({event:'get_path_list'});\n                setInterval(() => (th.send_peer({ event: 'get_pc_status' })), 5000)\n                setInterval(() => (th.send_peer({ event: 'stream' })), 150)\n            }\n            else if (data.event == 'get_pc_status') {\n\n                pc.cpuUsage = data.status.cpuUsage\n                pc.ramUsage = data.status.ramUsage\n                pc.battery = data.status.battery\n                pc.temp = data.status.temp\n\n            }\n            else if (data.event == 'stream') {\n                //base64Img = data.base64Img\n\n                exportData[2] = data.base64\n                //console.log('base64Img eieie ', exportData[2])\n\n            }\n            else if (data.event == 'get_path_list') {\n                console.log('got path list');\n                if (data.err) {\n                    console.error(data.err);\n                }\n                else {\n                    if (data.paths.length > 0) {\n                        console.log('data.path', data.paths)\n                        th.send_peer({ event: 'get_path', name: data.paths[0] });\n                    }\n                }\n            }\n            else if (data.event == 'get_path') {\n                console.log('got path');\n                if (data.err) {\n                    console.error(data.err);\n                }\n            }\n        });\n\n        this.candidates.forEach((c) => {\n            peer.signal(c);\n        });\n        peer.signal(msg);\n    },\n\n    sendMessage: function (message) {\n        var msg = { to: this.socket_id, message: message };\n        try {\n            console.log('send message : ' + JSON.stringify(msg));\n        }\n        catch (e) {\n            console.log('send message : [Circular]');\n        }\n        socket.emit('message', msg);\n    },\n\n    add_candidtates: function (message) {\n        console.log('got candidate');\n        if (this.socket_id) {\n            if (!this.peer)\n                this.candidates.push(message);\n            else\n                this.peer.signal(message);\n        }\n        else {\n            console.error('no robot');\n        }\n    },\n\n};\n\n//exports.pc = pc\n//exports.ConnectStatus = ConnectStatus\n\nexport default exportData\n"]},"metadata":{},"sourceType":"module"}