{"ast":null,"code":"import SimplePeer from 'simple-peer';\nimport io from \"socket.io-client\";\nimport wrtc from 'wrtc';\nvar pc = {\n  cpuUsage: 0,\n  ramUsage: 0,\n  battery: 0,\n  temp: 0\n};\nvar base64Img = 0;\nvar exportData = [pc, false, base64Img];\nvar URL = 'https://weather.mtec.or.th'; //const URL = 'http://localhost:8080';\n\nvar email = 'pat',\n    pass = 'agrimtec';\nvar socket = null;\nnew Promise(function (resolve, reject) {\n  //resolve(console.log('print'))\n  socket = io.connect(URL); //console.log('Im here')\n\n  socket.on('connect', function () {\n    console.log('socket connected');\n  }); // need log in\n\n  socket.on('request_login', function () {\n    //console.log('request_login');\n    socket.emit('login', {\n      email: email,\n      pass: pass\n    });\n  }); // login succeeded\n\n  socket.on('auth', function (data) {\n    //console.log('auth ok');\n    // get list of the robots that are currently online\n    socket.emit('get_robot_list');\n  });\n  socket.on('unauth', function (data) {\n    console.warn('cannot log in');\n  }); // got robot list\n\n  socket.on('get_robot_list', function (robots) {\n    if (!robots.peer) {\n      console.log('undefine robot not peer');\n      console.log('socket ID', socket.id); //console.log(robots[0])\n      //console.log('robot socket name', robots[0].socket_id)\n    } // connect to the first robot if exists\n\n\n    if (robots.length > 0 && !robot.peer) {\n      robot.connect(robots[0].socket_id);\n      exportData[1] = true;\n    } else {\n      console.log('Error Here');\n      exportData[1] = false;\n    }\n  }); // got message from server\n\n  socket.on('message', function (msg) {\n    var sender_id = msg.from; //console.log('sender_id', sender_id, 'msg auth type', msg.auth_type , 'message', msg.message)\n    //console.log('message : '+JSON.stringify(msg));\n\n    var message = msg.message;\n\n    if (message.type === 'offer') {\n      console.log('got offer');\n      robot.createPeerConnection(sender_id, msg.auth_type, message);\n    } else if (message.candidate) {\n      robot.add_candidtates(message);\n    } else {\n      console.warn('unknown message');\n    }\n  }); // receive when robot went offline\n\n  socket.on('robot_leave', function (socket_id) {\n    console.log('robot_leave : ' + socket_id);\n\n    if (robot.socket_id == socket_id) {\n      robot.destroy();\n    } else {\n      console.error('robot_leave : socket_id not match : ' + robot.socket_id + ' / ' + socket_id);\n    }\n  }); // receive when the robot refused the connection\n\n  socket.on('reject_call', function (msg) {\n    console.warn('reject_call');\n  }); // got error message\n\n  socket.on('alert', function (msg) {\n    console.warn('alert : ' + msg);\n    alert(msg);\n  });\n});\nvar robot = {\n  pcConfig: {\n    'iceServers': [{\n      'urls': 'stun:stun.l.google.com:19302'\n    }]\n  },\n  socket_id: null,\n  candidates: [],\n  peer: null,\n  auth_type: null,\n  b_connected: false,\n  timer_check_ready: null,\n  connect: function connect(socket_id) {\n    console.log('connect robot');\n\n    if (this.socket_id) {\n      console.warn('robot already exists');\n      return;\n    }\n\n    this.candidates = [];\n    this.socket_id = socket_id;\n    socket.emit('message', {\n      to: socket_id,\n      message: {\n        type: 'call'\n      }\n    });\n  },\n  disconnect: function disconnect() {\n    console.log('disconnect robot');\n    if (this.peer) this.send_peer({\n      event: 'bye'\n    });\n    this.destroy();\n  },\n  destroy: function destroy() {\n    var _this = this;\n\n    if (this.socket_id) {\n      this.socket_id = null;\n      setTimeout(function () {\n        if (_this.peer) {\n          _this.peer.destroy();\n\n          _this.peer = null;\n        }\n      }, 100);\n\n      if (this.timer_check_ready) {\n        clearInterval(this.timer_check_ready);\n        this.timer_check_ready = null;\n      }\n    }\n  },\n  send_peer: function send_peer(data) {\n    console.log('send_peer', data);\n    this.peer.send(JSON.stringify(data));\n  },\n  createPeerConnection: function createPeerConnection(socket_id, auth_type, msg) {\n    if (!this.socket_id) {\n      console.error('robot not connect');\n      return;\n    }\n\n    var th = this;\n    /*    if( pcConfig.iceServers.length<=1 ){\n            console.log('wait ice servers');\n            setTimeout( ()=>{ th.createPeerConnection(socket_id, auth_type, msg); }, 200);\n            return;\n        }*/\n\n    console.log('createPeerConnection');\n    th.socket_id = socket_id;\n    th.auth_type = auth_type;\n    var peer = this.peer = new SimplePeer({\n      initiator: false,\n      config: this.pcConfig\n    });\n    peer.on('error', function (err) {\n      console.error(err);\n    });\n    peer.on('connect', function () {\n      console.log('peer connected');\n      exportData[1] = true;\n      th.b_connected = true;\n\n      if (!th.timer_check_ready) {\n        th.timer_check_ready = setInterval(function () {\n          th.send_peer({\n            event: 'ready'\n          });\n        }, 1000);\n      }\n    });\n    peer.on('close', function () {\n      console.log('peer closed');\n      th.b_connected = false;\n      th.destroy();\n    });\n    peer.on('signal', function (data) {\n      console.log('signal : ' + JSON.stringify(data));\n      th.sendMessage(data);\n    });\n    peer.on('data', function (data) {\n      console.log('got data : ', data);\n\n      try {\n        //  console.log('my  Raw  Data', data)\n        data = JSON.parse(data);\n      } catch (e) {\n        console.warn('cannot parse data');\n        return;\n      } // console.log('data : ' + JSON.stringify(data));\n\n\n      if (data.event == 'ready') {\n        console.log('robot ready');\n\n        if (th.timer_check_ready) {\n          clearInterval(th.timer_check_ready);\n          th.timer_check_ready = null;\n        } // th.send_peer({event:'get_path_list'});\n\n\n        setInterval(function () {\n          return th.send_peer({\n            event: 'get_pc_status'\n          });\n        }, 5000);\n        setInterval(function () {\n          return th.send_peer({\n            event: 'stream'\n          });\n        }, 50);\n      } else if (data.event == 'get_pc_status') {\n        pc.cpuUsage = data.status.cpuUsage;\n        pc.ramUsage = data.status.ramUsage;\n        pc.battery = data.status.battery;\n        pc.temp = data.status.temp;\n      } else if (data.event == 'stream') {\n        //base64Img = data.base64Img\n        exportData[2] = data.base64; //console.log('base64Img eieie ', exportData[2])\n      } else if (data.event == 'get_path_list') {\n        console.log('got path list');\n\n        if (data.err) {\n          console.error(data.err);\n        } else {\n          if (data.paths.length > 0) {\n            console.log('data.path', data.paths);\n            th.send_peer({\n              event: 'get_path',\n              name: data.paths[0]\n            });\n          }\n        }\n      } else if (data.event == 'get_path') {\n        console.log('got path');\n\n        if (data.err) {\n          console.error(data.err);\n        }\n      }\n    });\n    this.candidates.forEach(function (c) {\n      peer.signal(c);\n    });\n    peer.signal(msg);\n  },\n  sendMessage: function sendMessage(message) {\n    var msg = {\n      to: this.socket_id,\n      message: message\n    };\n\n    try {\n      console.log('send message : ' + JSON.stringify(msg));\n    } catch (e) {\n      console.log('send message : [Circular]');\n    }\n\n    socket.emit('message', msg);\n  },\n  add_candidtates: function add_candidtates(message) {\n    console.log('got candidate');\n\n    if (this.socket_id) {\n      if (!this.peer) this.candidates.push(message);else this.peer.signal(message);\n    } else {\n      console.error('no robot');\n    }\n  }\n}; //exports.pc = pc\n//exports.ConnectStatus = ConnectStatus\n\nexport default exportData;","map":{"version":3,"sources":["/home/pat/robot_ui/src/Peer.js"],"names":["SimplePeer","io","wrtc","pc","cpuUsage","ramUsage","battery","temp","base64Img","exportData","URL","email","pass","socket","Promise","resolve","reject","connect","on","console","log","emit","data","warn","robots","peer","id","length","robot","socket_id","msg","sender_id","from","message","type","createPeerConnection","auth_type","candidate","add_candidtates","destroy","error","alert","pcConfig","candidates","b_connected","timer_check_ready","to","disconnect","send_peer","event","setTimeout","clearInterval","send","JSON","stringify","th","initiator","config","err","setInterval","sendMessage","parse","e","status","base64","paths","name","forEach","c","signal","push"],"mappings":"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","sourcesContent":["import SimplePeer from 'simple-peer'\nimport io from \"socket.io-client\";\nimport wrtc from 'wrtc'\n\nvar pc = {\n    cpuUsage: 0,\n    ramUsage: 0,\n    battery: 0,\n    temp: 0,\n}\nvar base64Img = 0\nvar exportData = [pc, false, base64Img]\nconst URL = 'https://weather.mtec.or.th';\n//const URL = 'http://localhost:8080';\nconst email = 'pat', pass = 'agrimtec';\nvar socket = null;\nnew Promise((resolve, reject) => {\n    //resolve(console.log('print'))\n    socket = io.connect(URL);\n    //console.log('Im here')\n    socket.on('connect', function () {\n        console.log('socket connected');\n    });\n    // need log in\n    socket.on('request_login', () => {\n        //console.log('request_login');\n        socket.emit('login', { email: email, pass: pass });\n    });\n\n    // login succeeded\n    socket.on('auth', function (data) {\n        //console.log('auth ok');\n        // get list of the robots that are currently online\n        socket.emit('get_robot_list');\n    });\n\n    socket.on('unauth', function (data) {\n        console.warn('cannot log in');\n    });\n\n    // got robot list\n    socket.on('get_robot_list', function (robots) {\n        if (!robots.peer) {\n            console.log('undefine robot not peer')\n            console.log('socket ID', socket.id)\n            //console.log(robots[0])\n            //console.log('robot socket name', robots[0].socket_id)\n        }\n\n        // connect to the first robot if exists\n        if (robots.length > 0 && !robot.peer) {\n            robot.connect(robots[0].socket_id);\n            exportData[1] = true\n\n        } else {\n            console.log('Error Here')\n            exportData[1] = false\n        }\n    });\n\n    // got message from server\n    socket.on('message', (msg) => {\n        var sender_id = msg.from;\n        //console.log('sender_id', sender_id, 'msg auth type', msg.auth_type , 'message', msg.message)\n        //console.log('message : '+JSON.stringify(msg));\n        var message = msg.message;\n\n        if (message.type === 'offer') {\n            console.log('got offer');\n            robot.createPeerConnection(sender_id, msg.auth_type, message);\n        }\n        else if (message.candidate) {\n            robot.add_candidtates(message);\n        }\n        else {\n            console.warn('unknown message');\n        }\n    });\n\n    // receive when robot went offline\n    socket.on('robot_leave', (socket_id) => {\n        console.log('robot_leave : ' + socket_id);\n        if (robot.socket_id == socket_id) {\n            robot.destroy();\n        }\n        else {\n            console.error('robot_leave : socket_id not match : ' + robot.socket_id + ' / ' + socket_id);\n        }\n    });\n\n    // receive when the robot refused the connection\n    socket.on('reject_call', (msg) => {\n        console.warn('reject_call');\n    });\n\n    // got error message\n    socket.on('alert', (msg) => {\n        console.warn('alert : ' + msg);\n        alert(msg);\n    });\n});\n\nvar robot = {\n    pcConfig: {\n        'iceServers': [{\n            'urls': 'stun:stun.l.google.com:19302'\n        },\n        ]\n    },\n\n    socket_id: null,\n    candidates: [],\n    peer: null,\n    auth_type: null,\n    b_connected: false,\n    timer_check_ready: null,\n\n    connect: function (socket_id) {\n        console.log('connect robot');\n        if (this.socket_id) {\n            console.warn('robot already exists');\n            return;\n        }\n        this.candidates = [];\n        this.socket_id = socket_id;\n        socket.emit('message', {\n            to: socket_id,\n            message: {\n                type: 'call'\n            }\n        });\n    },\n\n    disconnect: function () {\n        console.log('disconnect robot');\n        if (this.peer)\n            this.send_peer({ event: 'bye' });\n        this.destroy();\n    },\n\n    destroy: function () {\n        if (this.socket_id) {\n            this.socket_id = null;\n            setTimeout(() => {\n                if (this.peer) {\n                    this.peer.destroy();\n                    this.peer = null;\n                }\n            }, 100);\n            if (this.timer_check_ready) {\n                clearInterval(this.timer_check_ready);\n                this.timer_check_ready = null;\n            }\n        }\n    },\n\n    send_peer: function (data) {\n        console.log('send_peer', data);\n        this.peer.send(JSON.stringify(data));\n    },\n\n    createPeerConnection: function (socket_id, auth_type, msg) {\n        if (!this.socket_id) {\n            console.error('robot not connect');\n            return;\n        }\n        var th = this;\n        /*    if( pcConfig.iceServers.length<=1 ){\n                console.log('wait ice servers');\n                setTimeout( ()=>{ th.createPeerConnection(socket_id, auth_type, msg); }, 200);\n                return;\n            }*/\n        console.log('createPeerConnection');\n        th.socket_id = socket_id;\n        th.auth_type = auth_type;\n        var peer = this.peer = new SimplePeer({ initiator: false, config: this.pcConfig });\n        peer.on('error', (err) => {\n            console.error(err);\n        });\n        peer.on('connect', () => {\n            console.log('peer connected');\n            exportData[1] = true\n            th.b_connected = true;\n            if (!th.timer_check_ready) {\n                th.timer_check_ready = setInterval(() => {\n                    th.send_peer({ event: 'ready' });\n                }, 1000);\n            }\n        });\n\n        peer.on('close', () => {\n            console.log('peer closed');\n            th.b_connected = false;\n            th.destroy();\n        });\n        peer.on('signal', (data) => {\n            console.log('signal : ' + JSON.stringify(data));\n            th.sendMessage(data);\n        });\n        peer.on('data', (data) => {\n            console.log('got data : ', data);\n            try {\n                //  console.log('my  Raw  Data', data)\n                data = JSON.parse(data);\n\n            }\n            catch (e) {\n                console.warn('cannot parse data');\n                return;\n            }\n            // console.log('data : ' + JSON.stringify(data));\n            if (data.event == 'ready') {\n                console.log('robot ready');\n                if (th.timer_check_ready) {\n                    clearInterval(th.timer_check_ready);\n                    th.timer_check_ready = null;\n                }\n                // th.send_peer({event:'get_path_list'});\n                setInterval(() => (th.send_peer({ event: 'get_pc_status' })), 5000)\n                setInterval(() => (th.send_peer({ event: 'stream' })), 50)\n            }\n            else if (data.event == 'get_pc_status') {\n\n                pc.cpuUsage = data.status.cpuUsage\n                pc.ramUsage = data.status.ramUsage\n                pc.battery = data.status.battery\n                pc.temp = data.status.temp\n\n            }\n            else if (data.event == 'stream') {\n                //base64Img = data.base64Img\n\n                exportData[2] = data.base64\n                //console.log('base64Img eieie ', exportData[2])\n\n            }\n            else if (data.event == 'get_path_list') {\n                console.log('got path list');\n                if (data.err) {\n                    console.error(data.err);\n                }\n                else {\n                    if (data.paths.length > 0) {\n                        console.log('data.path', data.paths)\n                        th.send_peer({ event: 'get_path', name: data.paths[0] });\n                    }\n                }\n            }\n            else if (data.event == 'get_path') {\n                console.log('got path');\n                if (data.err) {\n                    console.error(data.err);\n                }\n            }\n        });\n\n        this.candidates.forEach((c) => {\n            peer.signal(c);\n        });\n        peer.signal(msg);\n    },\n\n    sendMessage: function (message) {\n        var msg = { to: this.socket_id, message: message };\n        try {\n            console.log('send message : ' + JSON.stringify(msg));\n        }\n        catch (e) {\n            console.log('send message : [Circular]');\n        }\n        socket.emit('message', msg);\n    },\n\n    add_candidtates: function (message) {\n        console.log('got candidate');\n        if (this.socket_id) {\n            if (!this.peer)\n                this.candidates.push(message);\n            else\n                this.peer.signal(message);\n        }\n        else {\n            console.error('no robot');\n        }\n    },\n\n};\n\n//exports.pc = pc\n//exports.ConnectStatus = ConnectStatus\n\nexport default exportData\n"]},"metadata":{},"sourceType":"module"}