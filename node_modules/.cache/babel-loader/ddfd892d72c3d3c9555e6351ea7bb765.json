{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/pat/robot_ui/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/pat/robot_ui/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/home/pat/robot_ui/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/home/pat/robot_ui/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/pat/robot_ui/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/pat/robot_ui/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Namespace = exports.RESERVED_EVENTS = void 0;\n\nvar socket_1 = require(\"./socket\");\n\nvar typed_events_1 = require(\"./typed-events\");\n\nvar debug_1 = __importDefault(require(\"debug\"));\n\nvar broadcast_operator_1 = require(\"./broadcast-operator\");\n\nvar debug = debug_1.default(\"socket.io:namespace\");\nexports.RESERVED_EVENTS = new Set([\"connect\", \"connection\", \"new_namespace\"]);\n\nvar Namespace = /*#__PURE__*/function (_typed_events_1$Stric) {\n  _inherits(Namespace, _typed_events_1$Stric);\n\n  var _super = _createSuper(Namespace);\n\n  /**\n   * Namespace constructor.\n   *\n   * @param server instance\n   * @param name\n   */\n  function Namespace(server, name) {\n    var _this;\n\n    _classCallCheck(this, Namespace);\n\n    _this = _super.call(this);\n    _this.sockets = new Map();\n    /** @private */\n\n    _this._fns = [];\n    /** @private */\n\n    _this._ids = 0;\n    _this.server = server;\n    _this.name = name;\n\n    _this._initAdapter();\n\n    return _this;\n  }\n  /**\n   * Initializes the `Adapter` for this nsp.\n   * Run upon changing adapter by `Server#adapter`\n   * in addition to the constructor.\n   *\n   * @private\n   */\n\n\n  _createClass(Namespace, [{\n    key: \"_initAdapter\",\n    value: function _initAdapter() {\n      // @ts-ignore\n      this.adapter = new (this.server.adapter())(this);\n    }\n    /**\n     * Sets up namespace middleware.\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"use\",\n    value: function use(fn) {\n      this._fns.push(fn);\n\n      return this;\n    }\n    /**\n     * Executes the middleware for an incoming client.\n     *\n     * @param socket - the socket that will get added\n     * @param fn - last fn call in the middleware\n     * @private\n     */\n\n  }, {\n    key: \"run\",\n    value: function run(socket, fn) {\n      var fns = this._fns.slice(0);\n\n      if (!fns.length) return fn(null);\n\n      function run(i) {\n        fns[i](socket, function (err) {\n          // upon error, short-circuit\n          if (err) return fn(err); // if no middleware left, summon callback\n\n          if (!fns[i + 1]) return fn(null); // go on to next\n\n          run(i + 1);\n        });\n      }\n\n      run(0);\n    }\n    /**\n     * Targets a room when emitting.\n     *\n     * @param room\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"to\",\n    value: function to(room) {\n      return new broadcast_operator_1.BroadcastOperator(this.adapter).to(room);\n    }\n    /**\n     * Targets a room when emitting.\n     *\n     * @param room\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"in\",\n    value: function _in(room) {\n      return new broadcast_operator_1.BroadcastOperator(this.adapter).in(room);\n    }\n    /**\n     * Excludes a room when emitting.\n     *\n     * @param room\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"except\",\n    value: function except(room) {\n      return new broadcast_operator_1.BroadcastOperator(this.adapter).except(room);\n    }\n    /**\n     * Adds a new client.\n     *\n     * @return {Socket}\n     * @private\n     */\n\n  }, {\n    key: \"_add\",\n    value: function _add(client, query, fn) {\n      var _this2 = this;\n\n      debug(\"adding socket to nsp %s\", this.name);\n      var socket = new socket_1.Socket(this, client, query);\n      this.run(socket, function (err) {\n        process.nextTick(function () {\n          if (\"open\" == client.conn.readyState) {\n            if (err) {\n              if (client.conn.protocol === 3) {\n                return socket._error(err.data || err.message);\n              } else {\n                return socket._error({\n                  message: err.message,\n                  data: err.data\n                });\n              }\n            } // track socket\n\n\n            _this2.sockets.set(socket.id, socket); // it's paramount that the internal `onconnect` logic\n            // fires before user-set events to prevent state order\n            // violations (such as a disconnection before the connection\n            // logic is complete)\n\n\n            socket._onconnect();\n\n            if (fn) fn(); // fire user-set events\n\n            _this2.emitReserved(\"connect\", socket);\n\n            _this2.emitReserved(\"connection\", socket);\n          } else {\n            debug(\"next called after client was closed - ignoring socket\");\n          }\n        });\n      });\n      return socket;\n    }\n    /**\n     * Removes a client. Called by each `Socket`.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_remove\",\n    value: function _remove(socket) {\n      if (this.sockets.has(socket.id)) {\n        this.sockets.delete(socket.id);\n      } else {\n        debug(\"ignoring remove for %s\", socket.id);\n      }\n    }\n    /**\n     * Emits to all clients.\n     *\n     * @return Always true\n     * @public\n     */\n\n  }, {\n    key: \"emit\",\n    value: function emit(ev) {\n      var _broadcast_operator_;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return (_broadcast_operator_ = new broadcast_operator_1.BroadcastOperator(this.adapter)).emit.apply(_broadcast_operator_, [ev].concat(args));\n    }\n    /**\n     * Sends a `message` event to all clients.\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"send\",\n    value: function send() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      this.emit.apply(this, [\"message\"].concat(args));\n      return this;\n    }\n    /**\n     * Sends a `message` event to all clients.\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"write\",\n    value: function write() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      this.emit.apply(this, [\"message\"].concat(args));\n      return this;\n    }\n    /**\n     * Emit a packet to other Socket.IO servers\n     *\n     * @param ev - the event name\n     * @param args - an array of arguments, which may include an acknowledgement callback at the end\n     * @public\n     */\n\n  }, {\n    key: \"serverSideEmit\",\n    value: function serverSideEmit(ev) {\n      if (exports.RESERVED_EVENTS.has(ev)) {\n        throw new Error(\"\\\"\".concat(ev, \"\\\" is a reserved event name\"));\n      }\n\n      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        args[_key4 - 1] = arguments[_key4];\n      }\n\n      args.unshift(ev);\n      this.adapter.serverSideEmit(args);\n      return true;\n    }\n    /**\n     * Called when a packet is received from another Socket.IO server\n     *\n     * @param args - an array of arguments, which may include an acknowledgement callback at the end\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_onServerSideEmit\",\n    value: function _onServerSideEmit(args) {\n      _get(_getPrototypeOf(Namespace.prototype), \"emitUntyped\", this).apply(this, args);\n    }\n    /**\n     * Gets a list of clients.\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"allSockets\",\n    value: function allSockets() {\n      return new broadcast_operator_1.BroadcastOperator(this.adapter).allSockets();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"compress\",\n    value: function compress(_compress) {\n      return new broadcast_operator_1.BroadcastOperator(this.adapter).compress(_compress);\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n     * receive messages (because of network slowness or other issues, or because theyâ€™re connected through long polling\n     * and is in the middle of a request-response cycle).\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"volatile\",\n    get: function get() {\n      return new broadcast_operator_1.BroadcastOperator(this.adapter).volatile;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"local\",\n    get: function get() {\n      return new broadcast_operator_1.BroadcastOperator(this.adapter).local;\n    }\n    /**\n     * Returns the matching socket instances\n     *\n     * @public\n     */\n\n  }, {\n    key: \"fetchSockets\",\n    value: function fetchSockets() {\n      return new broadcast_operator_1.BroadcastOperator(this.adapter).fetchSockets();\n    }\n    /**\n     * Makes the matching socket instances join the specified rooms\n     *\n     * @param room\n     * @public\n     */\n\n  }, {\n    key: \"socketsJoin\",\n    value: function socketsJoin(room) {\n      return new broadcast_operator_1.BroadcastOperator(this.adapter).socketsJoin(room);\n    }\n    /**\n     * Makes the matching socket instances leave the specified rooms\n     *\n     * @param room\n     * @public\n     */\n\n  }, {\n    key: \"socketsLeave\",\n    value: function socketsLeave(room) {\n      return new broadcast_operator_1.BroadcastOperator(this.adapter).socketsLeave(room);\n    }\n    /**\n     * Makes the matching socket instances disconnect\n     *\n     * @param close - whether to close the underlying connection\n     * @public\n     */\n\n  }, {\n    key: \"disconnectSockets\",\n    value: function disconnectSockets() {\n      var close = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return new broadcast_operator_1.BroadcastOperator(this.adapter).disconnectSockets(close);\n    }\n  }]);\n\n  return Namespace;\n}(typed_events_1.StrictEventEmitter);\n\nexports.Namespace = Namespace;","map":{"version":3,"sources":["/home/pat/robot_ui/node_modules/socket.io/dist/namespace.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Namespace","RESERVED_EVENTS","socket_1","require","typed_events_1","debug_1","broadcast_operator_1","debug","default","Set","server","name","sockets","Map","_fns","_ids","_initAdapter","adapter","fn","push","socket","fns","slice","length","run","i","err","room","BroadcastOperator","to","in","except","client","query","Socket","process","nextTick","conn","readyState","protocol","_error","data","message","set","id","_onconnect","emitReserved","has","delete","ev","args","emit","Error","unshift","serverSideEmit","apply","allSockets","compress","volatile","local","fetchSockets","socketsJoin","socketsLeave","close","disconnectSockets","StrictEventEmitter"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Namespace = exports.RESERVED_EVENTS = void 0;\nconst socket_1 = require(\"./socket\");\nconst typed_events_1 = require(\"./typed-events\");\nconst debug_1 = __importDefault(require(\"debug\"));\nconst broadcast_operator_1 = require(\"./broadcast-operator\");\nconst debug = debug_1.default(\"socket.io:namespace\");\nexports.RESERVED_EVENTS = new Set([\"connect\", \"connection\", \"new_namespace\"]);\nclass Namespace extends typed_events_1.StrictEventEmitter {\n    /**\n     * Namespace constructor.\n     *\n     * @param server instance\n     * @param name\n     */\n    constructor(server, name) {\n        super();\n        this.sockets = new Map();\n        /** @private */\n        this._fns = [];\n        /** @private */\n        this._ids = 0;\n        this.server = server;\n        this.name = name;\n        this._initAdapter();\n    }\n    /**\n     * Initializes the `Adapter` for this nsp.\n     * Run upon changing adapter by `Server#adapter`\n     * in addition to the constructor.\n     *\n     * @private\n     */\n    _initAdapter() {\n        // @ts-ignore\n        this.adapter = new (this.server.adapter())(this);\n    }\n    /**\n     * Sets up namespace middleware.\n     *\n     * @return self\n     * @public\n     */\n    use(fn) {\n        this._fns.push(fn);\n        return this;\n    }\n    /**\n     * Executes the middleware for an incoming client.\n     *\n     * @param socket - the socket that will get added\n     * @param fn - last fn call in the middleware\n     * @private\n     */\n    run(socket, fn) {\n        const fns = this._fns.slice(0);\n        if (!fns.length)\n            return fn(null);\n        function run(i) {\n            fns[i](socket, function (err) {\n                // upon error, short-circuit\n                if (err)\n                    return fn(err);\n                // if no middleware left, summon callback\n                if (!fns[i + 1])\n                    return fn(null);\n                // go on to next\n                run(i + 1);\n            });\n        }\n        run(0);\n    }\n    /**\n     * Targets a room when emitting.\n     *\n     * @param room\n     * @return self\n     * @public\n     */\n    to(room) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).to(room);\n    }\n    /**\n     * Targets a room when emitting.\n     *\n     * @param room\n     * @return self\n     * @public\n     */\n    in(room) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).in(room);\n    }\n    /**\n     * Excludes a room when emitting.\n     *\n     * @param room\n     * @return self\n     * @public\n     */\n    except(room) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).except(room);\n    }\n    /**\n     * Adds a new client.\n     *\n     * @return {Socket}\n     * @private\n     */\n    _add(client, query, fn) {\n        debug(\"adding socket to nsp %s\", this.name);\n        const socket = new socket_1.Socket(this, client, query);\n        this.run(socket, (err) => {\n            process.nextTick(() => {\n                if (\"open\" == client.conn.readyState) {\n                    if (err) {\n                        if (client.conn.protocol === 3) {\n                            return socket._error(err.data || err.message);\n                        }\n                        else {\n                            return socket._error({\n                                message: err.message,\n                                data: err.data,\n                            });\n                        }\n                    }\n                    // track socket\n                    this.sockets.set(socket.id, socket);\n                    // it's paramount that the internal `onconnect` logic\n                    // fires before user-set events to prevent state order\n                    // violations (such as a disconnection before the connection\n                    // logic is complete)\n                    socket._onconnect();\n                    if (fn)\n                        fn();\n                    // fire user-set events\n                    this.emitReserved(\"connect\", socket);\n                    this.emitReserved(\"connection\", socket);\n                }\n                else {\n                    debug(\"next called after client was closed - ignoring socket\");\n                }\n            });\n        });\n        return socket;\n    }\n    /**\n     * Removes a client. Called by each `Socket`.\n     *\n     * @private\n     */\n    _remove(socket) {\n        if (this.sockets.has(socket.id)) {\n            this.sockets.delete(socket.id);\n        }\n        else {\n            debug(\"ignoring remove for %s\", socket.id);\n        }\n    }\n    /**\n     * Emits to all clients.\n     *\n     * @return Always true\n     * @public\n     */\n    emit(ev, ...args) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).emit(ev, ...args);\n    }\n    /**\n     * Sends a `message` event to all clients.\n     *\n     * @return self\n     * @public\n     */\n    send(...args) {\n        this.emit(\"message\", ...args);\n        return this;\n    }\n    /**\n     * Sends a `message` event to all clients.\n     *\n     * @return self\n     * @public\n     */\n    write(...args) {\n        this.emit(\"message\", ...args);\n        return this;\n    }\n    /**\n     * Emit a packet to other Socket.IO servers\n     *\n     * @param ev - the event name\n     * @param args - an array of arguments, which may include an acknowledgement callback at the end\n     * @public\n     */\n    serverSideEmit(ev, ...args) {\n        if (exports.RESERVED_EVENTS.has(ev)) {\n            throw new Error(`\"${ev}\" is a reserved event name`);\n        }\n        args.unshift(ev);\n        this.adapter.serverSideEmit(args);\n        return true;\n    }\n    /**\n     * Called when a packet is received from another Socket.IO server\n     *\n     * @param args - an array of arguments, which may include an acknowledgement callback at the end\n     *\n     * @private\n     */\n    _onServerSideEmit(args) {\n        super.emitUntyped.apply(this, args);\n    }\n    /**\n     * Gets a list of clients.\n     *\n     * @return self\n     * @public\n     */\n    allSockets() {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).allSockets();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n    compress(compress) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).compress(compress);\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n     * receive messages (because of network slowness or other issues, or because theyâ€™re connected through long polling\n     * and is in the middle of a request-response cycle).\n     *\n     * @return self\n     * @public\n     */\n    get volatile() {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).volatile;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n     *\n     * @return self\n     * @public\n     */\n    get local() {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).local;\n    }\n    /**\n     * Returns the matching socket instances\n     *\n     * @public\n     */\n    fetchSockets() {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).fetchSockets();\n    }\n    /**\n     * Makes the matching socket instances join the specified rooms\n     *\n     * @param room\n     * @public\n     */\n    socketsJoin(room) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).socketsJoin(room);\n    }\n    /**\n     * Makes the matching socket instances leave the specified rooms\n     *\n     * @param room\n     * @public\n     */\n    socketsLeave(room) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).socketsLeave(room);\n    }\n    /**\n     * Makes the matching socket instances disconnect\n     *\n     * @param close - whether to close the underlying connection\n     * @public\n     */\n    disconnectSockets(close = false) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).disconnectSockets(close);\n    }\n}\nexports.Namespace = Namespace;\n"]},"metadata":{},"sourceType":"script"}