{"ast":null,"code":"import _slicedToArray from \"/home/pat/robot_ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/pat/robot_ui/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport Navbar from './components/layouts/Navbar';\nimport Home from './components/pages/Home';\nimport Socket from './components/pages/Socket';\nimport Header from './components/components/Header';\nimport Maps from './components/components/Maps';\nimport Footer from './components/components/Footer';\nimport { useState, useEffect } from 'react';\nimport io from \"socket.io-client\";\nimport wrtc from 'wrtc';\nimport socket from 'socket.io';\nimport SimplePeer from 'simple-peer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      computerStatus = _useState2[0],\n      setcomputerStatus = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      connectStatus = _useState4[0],\n      setConnectStatus = _useState4[1];\n\n  useEffect(function () {\n    var URL = 'https://weather.mtec.or.th'; //const URL = 'http://localhost:8080';\n\n    var email = 'pat',\n        pass = 'agrimtec';\n    var socket = null;\n    new Promise(function (resolve, reject) {\n      //resolve(console.log('print'))\n      socket = io.connect(URL); //console.log('Im here')\n\n      socket.on('connect', function () {\n        console.log('socket connected');\n      }); // need log in\n\n      socket.on('request_login', function () {\n        //console.log('request_login');\n        socket.emit('login', {\n          email: email,\n          pass: pass\n        });\n      }); // login succeeded\n\n      socket.on('auth', function (data) {\n        //console.log('auth ok');\n        // get list of the robots that are currently online\n        socket.emit('get_robot_list');\n      });\n      socket.on('unauth', function (data) {\n        console.warn('cannot log in');\n      }); // got robot list\n\n      socket.on('get_robot_list', function (robots) {\n        if (!robots.peer) {\n          console.log('undefine robot not peer');\n          console.log('socket ID', socket.id); //console.log(robots[0])\n          //console.log('robot socket name', robots[0].socket_id)\n        } // connect to the first robot if exists\n\n\n        if (robots.length > 0 && !robot.peer) {\n          robot.connect(robots[0].socket_id);\n          setConnectStatus(true);\n        } else {\n          console.log('Error Here');\n        }\n      }); // got message from server\n\n      socket.on('message', function (msg) {\n        var sender_id = msg.from; //console.log('sender_id', sender_id, 'msg auth type', msg.auth_type , 'message', msg.message)\n        //console.log('message : '+JSON.stringify(msg));\n\n        var message = msg.message;\n\n        if (message.type === 'offer') {\n          console.log('got offer');\n          robot.createPeerConnection(sender_id, msg.auth_type, message);\n        } else if (message.candidate) {\n          robot.add_candidtates(message);\n        } else {\n          console.warn('unknown message');\n        }\n      }); // receive when robot went offline\n\n      socket.on('robot_leave', function (socket_id) {\n        console.log('robot_leave : ' + socket_id);\n\n        if (robot.socket_id == socket_id) {\n          robot.destroy();\n        } else {\n          console.error('robot_leave : socket_id not match : ' + robot.socket_id + ' / ' + socket_id);\n        }\n      }); // receive when the robot refused the connection\n\n      socket.on('reject_call', function (msg) {\n        console.warn('reject_call');\n      }); // got error message\n\n      socket.on('alert', function (msg) {\n        console.warn('alert : ' + msg);\n        alert(msg);\n      });\n    });\n    var robot = {\n      pcConfig: {\n        'iceServers': [{\n          'urls': 'stun:stun.l.google.com:19302'\n        }]\n      },\n      socket_id: null,\n      candidates: [],\n      peer: null,\n      auth_type: null,\n      b_connected: false,\n      timer_check_ready: null,\n      connect: function connect(socket_id) {\n        console.log('connect robot');\n\n        if (this.socket_id) {\n          console.warn('robot already exists');\n          return;\n        }\n\n        this.candidates = [];\n        this.socket_id = socket_id;\n        socket.emit('message', {\n          to: socket_id,\n          message: {\n            type: 'call'\n          }\n        });\n      },\n      disconnect: function disconnect() {\n        console.log('disconnect robot');\n        if (this.peer) this.send_peer({\n          event: 'bye'\n        });\n        this.destroy();\n      },\n      destroy: function destroy() {\n        var _this = this;\n\n        if (this.socket_id) {\n          this.socket_id = null;\n          setTimeout(function () {\n            if (_this.peer) {\n              _this.peer.destroy();\n\n              _this.peer = null;\n            }\n          }, 100);\n\n          if (this.timer_check_ready) {\n            clearInterval(this.timer_check_ready);\n            this.timer_check_ready = null;\n          }\n        }\n      },\n      send_peer: function send_peer(data) {\n        console.log('send_peer', data);\n        this.peer.send(JSON.stringify(data));\n      },\n      createPeerConnection: function createPeerConnection(socket_id, auth_type, msg) {\n        if (!this.socket_id) {\n          console.error('robot not connect');\n          return;\n        }\n\n        var th = this;\n        /*    if( pcConfig.iceServers.length<=1 ){\n        \t  console.log('wait ice servers');\n        \t  setTimeout( ()=>{ th.createPeerConnection(socket_id, auth_type, msg); }, 200);\n        \t  return;\n        \t}*/\n\n        console.log('createPeerConnection');\n        th.socket_id = socket_id;\n        th.auth_type = auth_type;\n        var peer = this.peer = new SimplePeer({\n          initiator: false,\n          config: this.pcConfig\n        });\n        peer.on('error', function (err) {\n          console.error(err);\n        });\n        peer.on('connect', function () {\n          console.log('peer connected');\n          th.b_connected = true;\n\n          if (!th.timer_check_ready) {\n            th.timer_check_ready = setInterval(function () {\n              th.send_peer({\n                event: 'ready'\n              });\n            }, 1000);\n          }\n        });\n        peer.on('patTest', function () {\n          console.log('patTest p2p');\n        });\n        peer.on('close', function () {\n          console.log('peer closed');\n          th.b_connected = false;\n          th.destroy();\n        });\n        peer.on('signal', function (data) {\n          console.log('signal : ' + JSON.stringify(data));\n          th.sendMessage(data);\n        });\n        peer.on('data', function (data) {\n          console.log('got data : ', data);\n\n          try {\n            console.log('my  Raw  Data', data);\n            data = JSON.parse(data);\n            console.log('data after parse', data.status);\n          } catch (e) {\n            console.warn('cannot parse data');\n            return;\n          }\n\n          console.log('data : ' + JSON.stringify(data));\n\n          if (data.event == 'ready') {\n            console.log('robot ready');\n\n            if (th.timer_check_ready) {\n              clearInterval(th.timer_check_ready);\n              th.timer_check_ready = null;\n            } // th.send_peer({event:'get_path_list'});\n\n\n            setInterval(function () {\n              return th.send_peer({\n                event: 'get_pc_status'\n              });\n            }, 5000);\n          } else if (data.event == 'get_pc_status') {\n            console.log('Yeah we got it ' + data.status);\n          } else if (data.event == 'get_path_list') {\n            console.log('got path list');\n\n            if (data.err) {\n              console.error(data.err);\n            } else {\n              if (data.paths.length > 0) {\n                console.log('data.path', data.paths);\n                th.send_peer({\n                  event: 'get_path',\n                  name: data.paths[0]\n                });\n              }\n            }\n          } else if (data.event == 'get_path') {\n            console.log('got path');\n\n            if (data.err) {\n              console.error(data.err);\n            }\n          }\n        });\n        this.candidates.forEach(function (c) {\n          peer.signal(c);\n        });\n        peer.signal(msg);\n      },\n      sendMessage: function sendMessage(message) {\n        var msg = {\n          to: this.socket_id,\n          message: message\n        };\n\n        try {\n          console.log('send message : ' + JSON.stringify(msg));\n        } catch (e) {\n          console.log('send message : [Circular]');\n        }\n\n        socket.emit('message', msg);\n      },\n      add_candidtates: function add_candidtates(message) {\n        console.log('got candidate');\n\n        if (this.socket_id) {\n          if (!this.peer) this.candidates.push(message);else this.peer.signal(message);\n        } else {\n          console.error('no robot');\n        }\n      }\n    };\n  }, 0);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        children: [' ', /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/map\",\n        children: /*#__PURE__*/_jsxDEV(Maps, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/test\",\n        children: /*#__PURE__*/_jsxDEV(Socket, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"+f6QONtcwnQjKBzzF2CflLgPOBs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/pat/robot_ui/src/App.js"],"names":["BrowserRouter","Router","Switch","Route","Link","Navbar","Home","Socket","Header","Maps","Footer","useState","useEffect","io","wrtc","socket","SimplePeer","App","computerStatus","setcomputerStatus","connectStatus","setConnectStatus","URL","email","pass","Promise","resolve","reject","connect","on","console","log","emit","data","warn","robots","peer","id","length","robot","socket_id","msg","sender_id","from","message","type","createPeerConnection","auth_type","candidate","add_candidtates","destroy","error","alert","pcConfig","candidates","b_connected","timer_check_ready","to","disconnect","send_peer","event","setTimeout","clearInterval","send","JSON","stringify","th","initiator","config","err","setInterval","sendMessage","parse","status","e","paths","name","forEach","c","signal","push"],"mappings":"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","sourcesContent":["import { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport Navbar from './components/layouts/Navbar';\nimport Home from './components/pages/Home';\nimport Socket from './components/pages/Socket';\nimport Header from './components/components/Header';\nimport Maps from './components/components/Maps';\nimport Footer from './components/components/Footer'\nimport { useState, useEffect } from 'react'\nimport io from \"socket.io-client\";\nimport wrtc from 'wrtc'\nimport socket from 'socket.io'\nimport SimplePeer from 'simple-peer'\n\nfunction App() {\n\tconst [computerStatus, setcomputerStatus] = useState(0)\n\tconst [connectStatus, setConnectStatus] = useState(false)\n\tuseEffect(() => {\n\t\tconst URL = 'https://weather.mtec.or.th';\n\t\t//const URL = 'http://localhost:8080';\n\t\tconst email = 'pat', pass = 'agrimtec';\n\t\tvar socket = null;\n\t\tnew Promise((resolve, reject) => {\n\t\t\t//resolve(console.log('print'))\n\t\t\tsocket = io.connect(URL);\n\t\t\t//console.log('Im here')\n\t\t\tsocket.on('connect', function () {\n\t\t\t\tconsole.log('socket connected');\n\n\t\t\t});\n\n\t\t\t// need log in\n\t\t\tsocket.on('request_login', () => {\n\t\t\t\t//console.log('request_login');\n\t\t\t\tsocket.emit('login', { email: email, pass: pass });\n\t\t\t});\n\n\t\t\t// login succeeded\n\t\t\tsocket.on('auth', function (data) {\n\t\t\t\t//console.log('auth ok');\n\t\t\t\t// get list of the robots that are currently online\n\t\t\t\tsocket.emit('get_robot_list');\n\t\t\t});\n\n\t\t\tsocket.on('unauth', function (data) {\n\t\t\t\tconsole.warn('cannot log in');\n\t\t\t});\n\n\t\t\t// got robot list\n\t\t\tsocket.on('get_robot_list', function (robots) {\n\t\t\t\tif (!robots.peer) {\n\t\t\t\t\tconsole.log('undefine robot not peer')\n\t\t\t\t\tconsole.log('socket ID', socket.id)\n\t\t\t\t\t//console.log(robots[0])\n\t\t\t\t\t//console.log('robot socket name', robots[0].socket_id)\n\t\t\t\t}\n\n\t\t\t\t// connect to the first robot if exists\n\t\t\t\tif (robots.length > 0 && !robot.peer) {\n\t\t\t\t\trobot.connect(robots[0].socket_id);\n\t\t\t\t\tsetConnectStatus(true)\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('Error Here')\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// got message from server\n\t\t\tsocket.on('message', (msg) => {\n\t\t\t\tvar sender_id = msg.from;\n\t\t\t\t//console.log('sender_id', sender_id, 'msg auth type', msg.auth_type , 'message', msg.message)\n\t\t\t\t//console.log('message : '+JSON.stringify(msg));\n\t\t\t\tvar message = msg.message;\n\n\t\t\t\tif (message.type === 'offer') {\n\t\t\t\t\tconsole.log('got offer');\n\t\t\t\t\trobot.createPeerConnection(sender_id, msg.auth_type, message);\n\t\t\t\t}\n\t\t\t\telse if (message.candidate) {\n\t\t\t\t\trobot.add_candidtates(message);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconsole.warn('unknown message');\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// receive when robot went offline\n\t\t\tsocket.on('robot_leave', (socket_id) => {\n\t\t\t\tconsole.log('robot_leave : ' + socket_id);\n\t\t\t\tif (robot.socket_id == socket_id) {\n\t\t\t\t\trobot.destroy();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconsole.error('robot_leave : socket_id not match : ' + robot.socket_id + ' / ' + socket_id);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// receive when the robot refused the connection\n\t\t\tsocket.on('reject_call', (msg) => {\n\t\t\t\tconsole.warn('reject_call');\n\t\t\t});\n\n\t\t\t// got error message\n\t\t\tsocket.on('alert', (msg) => {\n\t\t\t\tconsole.warn('alert : ' + msg);\n\t\t\t\talert(msg);\n\t\t\t});\n\t\t});\n\n\t\tvar robot = {\n\t\t\tpcConfig: {\n\t\t\t\t'iceServers': [{\n\t\t\t\t\t'urls': 'stun:stun.l.google.com:19302'\n\t\t\t\t},\n\t\t\t\t]\n\t\t\t},\n\n\t\t\tsocket_id: null,\n\t\t\tcandidates: [],\n\t\t\tpeer: null,\n\t\t\tauth_type: null,\n\t\t\tb_connected: false,\n\t\t\ttimer_check_ready: null,\n\n\t\t\tconnect: function (socket_id) {\n\t\t\t\tconsole.log('connect robot');\n\t\t\t\tif (this.socket_id) {\n\t\t\t\t\tconsole.warn('robot already exists');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.candidates = [];\n\t\t\t\tthis.socket_id = socket_id;\n\t\t\t\tsocket.emit('message', {\n\t\t\t\t\tto: socket_id,\n\t\t\t\t\tmessage: {\n\t\t\t\t\t\ttype: 'call'\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\n\t\t\tdisconnect: function () {\n\t\t\t\tconsole.log('disconnect robot');\n\t\t\t\tif (this.peer)\n\t\t\t\t\tthis.send_peer({ event: 'bye' });\n\t\t\t\tthis.destroy();\n\t\t\t},\n\n\t\t\tdestroy: function () {\n\t\t\t\tif (this.socket_id) {\n\t\t\t\t\tthis.socket_id = null;\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (this.peer) {\n\t\t\t\t\t\t\tthis.peer.destroy();\n\t\t\t\t\t\t\tthis.peer = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 100);\n\t\t\t\t\tif (this.timer_check_ready) {\n\t\t\t\t\t\tclearInterval(this.timer_check_ready);\n\t\t\t\t\t\tthis.timer_check_ready = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tsend_peer: function (data) {\n\t\t\t\tconsole.log('send_peer', data);\n\t\t\t\tthis.peer.send(JSON.stringify(data));\n\t\t\t},\n\n\t\t\tcreatePeerConnection: function (socket_id, auth_type, msg) {\n\t\t\t\tif (!this.socket_id) {\n\t\t\t\t\tconsole.error('robot not connect');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar th = this;\n\t\t\t\t/*    if( pcConfig.iceServers.length<=1 ){\n\t\t\t\t\t  console.log('wait ice servers');\n\t\t\t\t\t  setTimeout( ()=>{ th.createPeerConnection(socket_id, auth_type, msg); }, 200);\n\t\t\t\t\t  return;\n\t\t\t\t\t}*/\n\t\t\t\tconsole.log('createPeerConnection');\n\t\t\t\tth.socket_id = socket_id;\n\t\t\t\tth.auth_type = auth_type;\n\t\t\t\tvar peer = this.peer = new SimplePeer({ initiator: false, config: this.pcConfig });\n\t\t\t\tpeer.on('error', (err) => {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t});\n\t\t\t\tpeer.on('connect', () => {\n\t\t\t\t\tconsole.log('peer connected');\n\t\t\t\t\tth.b_connected = true;\n\t\t\t\t\tif (!th.timer_check_ready) {\n\t\t\t\t\t\tth.timer_check_ready = setInterval(() => {\n\t\t\t\t\t\t\tth.send_peer({ event: 'ready' });\n\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tpeer.on('patTest', () => {\n\t\t\t\t\tconsole.log('patTest p2p')\n\t\t\t\t})\n\t\t\t\tpeer.on('close', () => {\n\t\t\t\t\tconsole.log('peer closed');\n\t\t\t\t\tth.b_connected = false;\n\t\t\t\t\tth.destroy();\n\t\t\t\t});\n\t\t\t\tpeer.on('signal', (data) => {\n\t\t\t\t\tconsole.log('signal : ' + JSON.stringify(data));\n\t\t\t\t\tth.sendMessage(data);\n\t\t\t\t});\n\t\t\t\tpeer.on('data', (data) => {\n\t\t\t\t\tconsole.log('got data : ', data);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconsole.log('my  Raw  Data', data)\n\t\t\t\t\t\tdata = JSON.parse(data);\n\t\t\t\t\t\tconsole.log('data after parse', data.status)\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\tconsole.warn('cannot parse data');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconsole.log('data : ' + JSON.stringify(data));\n\t\t\t\t\tif (data.event == 'ready') {\n\t\t\t\t\t\tconsole.log('robot ready');\n\t\t\t\t\t\tif (th.timer_check_ready) {\n\t\t\t\t\t\t\tclearInterval(th.timer_check_ready);\n\t\t\t\t\t\t\tth.timer_check_ready = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// th.send_peer({event:'get_path_list'});\n\t\t\t\t\t\tsetInterval(() => (th.send_peer({ event: 'get_pc_status' })), 5000)\n\t\t\t\t\t}\n\t\t\t\t\telse if (data.event == 'get_pc_status') {\n\n\n\n\t\t\t\t\t\tconsole.log('Yeah we got it ' + data.status)\n\t\t\t\t\t}\n\t\t\t\t\telse if (data.event == 'get_path_list') {\n\t\t\t\t\t\tconsole.log('got path list');\n\t\t\t\t\t\tif (data.err) {\n\t\t\t\t\t\t\tconsole.error(data.err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tif (data.paths.length > 0) {\n\t\t\t\t\t\t\t\tconsole.log('data.path', data.paths)\n\t\t\t\t\t\t\t\tth.send_peer({ event: 'get_path', name: data.paths[0] });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (data.event == 'get_path') {\n\t\t\t\t\t\tconsole.log('got path');\n\t\t\t\t\t\tif (data.err) {\n\t\t\t\t\t\t\tconsole.error(data.err);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tthis.candidates.forEach((c) => {\n\t\t\t\t\tpeer.signal(c);\n\t\t\t\t});\n\t\t\t\tpeer.signal(msg);\n\t\t\t},\n\n\t\t\tsendMessage: function (message) {\n\t\t\t\tvar msg = { to: this.socket_id, message: message };\n\t\t\t\ttry {\n\t\t\t\t\tconsole.log('send message : ' + JSON.stringify(msg));\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\tconsole.log('send message : [Circular]');\n\t\t\t\t}\n\t\t\t\tsocket.emit('message', msg);\n\t\t\t},\n\n\t\t\tadd_candidtates: function (message) {\n\t\t\t\tconsole.log('got candidate');\n\t\t\t\tif (this.socket_id) {\n\t\t\t\t\tif (!this.peer)\n\t\t\t\t\t\tthis.candidates.push(message);\n\t\t\t\t\telse\n\t\t\t\t\t\tthis.peer.signal(message);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconsole.error('no robot');\n\t\t\t\t}\n\t\t\t},\n\n\t\t};\n\t}\n\n\t\t, 0);\n\treturn (\n\n\t\t<Router>\n\n\t\t\t<Switch>\n\t\t\t\t<Route exact path='/'>\n\t\t\t\t\t{' '}\n\t\t\t\t\t<div >\n\t\t\t\t\t\t<Navbar />\n\t\t\t\t\t</div>\n\t\t\t\t\t<Header />\n\t\t\t\t\t<Home />\n\t\t\t\t\t<Footer />\n\t\t\t\t</Route>\n\t\t\t\t<Route exact path='/map'>\n\t\t\t\t\t<Maps />\n\t\t\t\t</Route>\n\t\t\t\t<Route exact path=\"/test\" >\n\t\t\t\t\t<Socket />\n\t\t\t\t</Route>\n\t\t\t</Switch>\n\n\t\t</Router>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}